STACK :
it is a linear data structure,which allow to insert od delete the element from only one end of the stack called "top".
operations:
1)push--to insert an element
--pass an element to push method
--check if stack is full ==>  top==-1 then cant insert element 
--othewise inc top and insert element.

2)pop--to delete top most element
--check if stack is empty ==> top==-1 then cant delete
--decrement top

display stack upto top...

public class StackDs {
	private static Object[] stackarray;
	private static int size;
	private static int top;
	public StackDs(int size){
		this.size=size;
		stackarray = new Object[size];
		this.top=-1;
	}
	public void push(Object val) {			//arr is Object type then ele also Object type
		if(top==size-1)
			System.out.println("Cant enter values"); 
		else {									   //push --> 1)check full or not
			stackarray[++top]=val;				                     //		  2)inc top                      must inc top then only add else Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 6
												   //      3)add ele                                                                       //at StackDs.push(StackDs.java:15)
	                                                                                    //		at StackDs.main(StackDs.java:42)
			                                    	     
			}
	}

	public Object pop() {
	
		if(top==-1)
			System.out.println("stack empty");
		else {
			int oldtop=top;
			System.out.println("poped ele "+stackarray[oldtop]);
			top--;
			stackarray[oldtop]=null;
		}
			return stackarray[top];
		
	}
		public Object peek(){	
			
				return stackarray[top];
			
		
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		StackDs s=new StackDs(5);
		s.push(10);
		s.push(20);
		s.push(30);
		s.push(40);
		s.push(50);
		System.out.println("elements before poping");
		for(int i=0;i<=top;i++) {
			System.out.println(stackarray[i]);
		}
		
		s.pop();
		s.pop();
		System.out.println("elements after poping");

		for(int i=0;i<=top;i++) {
			System.out.println(stackarray[i]);
		}
		
        System.out.println("top most element is : "+s.peek());
	}

}

//output
//elements before poping
//10
//20
//30
//40
//50
//poped ele 50
//poped ele 40
//elements after poping
//10
//20
//30
//top most element is : 30


// must use top to print stack elements else error may occur like this.......................

//10
//20
//30
//40
//50
//null
//Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 6 out of bounds for length 6
//	at StackDs.main(StackDs.java:48)
