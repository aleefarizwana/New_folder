Stack implementation Using Two Queues:


import java.util.*;

public class StackUsingTwoQueues {

    // Define the data members
    private Queue<Integer> q1;
    private Queue<Integer> q2;
    private int size;

  
    public StackUsingTwoQueues() {
        // Implement the Constructor
        q1 = new java.util.LinkedList<Integer>();
        q2 = new java.util.LinkedList<Integer>();
        size = 0;
    }

    /*----------------- Public Functions of Stack -----------------*/

    public int getSize() {
        // Implement the getSize() function
        return size;
    }

    public boolean isEmpty() {
        // Implement the isEmpty() function
        return size == 0;
    }

    public void push(int element) {
        // Implement the push(element) function
        q1.add(element);
        size = size + 1;
    }

    public int pop() {
        // Implement the pop() function
        if (q1.isEmpty()) {
            return -1;
        }
        while (q1.size() != 1) {
            q2.add(q1.remove());
        }
        int top = q1.remove();

        while (!q2.isEmpty()) {
            q1.add(q2.remove());
        }
        size = size - 1;
        return top;
    }

    public int top() {
        // Implement the top() function
        if (q1.isEmpty()) {
            return -1;
        }
        while (q1.size() != 1) {
            q2.add(q1.remove());
        }
        int top = q1.peek();
        q2.add(q1.remove());

        Queue<Integer> q = q1;
        q1 = q2;
        q2 = q;
        return top;
    }

    public static void main(String[] args) {
        StackUsingTwoQueues s1 = new StackUsingTwoQueues();
        s1.push(10);
        s1.push(20);
        s1.push(30);
        System.out.println(s1.top());
        s1.pop();
        System.out.println(s1.top());

    }
}


//output
//30
//20


//java.util.Queue<Integer>
//A collection designed for holding elements prior to processing.Besides basic Collection operations, queues provideadditional insertion, extraction, and inspection operations.Each of these methods exists in two forms: one throws an exceptionif the operation fails, the other returns a special value (either null or false, depending on the operation). Thelatter form of the insert operation is designed specifically foruse with capacity-restricted Queue implementations; in mostimplementations, insert operations cannot fail. 
//Summary of Queue methods
//Throws exception
//Returns special value
//Insert
//add(e) offer(e) 
//Remove
//remove() poll() 
//Examine
//element() peek() 
//Queues typically, but do not necessarily, order elements in aFIFO (first-in-first-out) manner. Among the exceptions arepriority queues, which order elements according to a suppliedcomparator, or the elements' natural ordering, and LIFO queues (orstacks) which order the elements LIFO (last-in-first-out).Whatever the ordering used, the head of the queue is thatelement which would be removed by a call to remove() or poll(). In a FIFO queue, all new elements are inserted atthe tail of the queue. Other kinds of queues may usedifferent placement rules. Every Queue implementationmust specify its ordering properties. 
//The offer method inserts an element if possible,otherwise returning false. This differs from the Collection.add method, which can fail toadd an element only by throwing an unchecked exception. The offer method is designed for use when failure is a normal,rather than exceptional occurrence, for example, in fixed-capacity(or "bounded") queues. 
//The remove() and poll() methods remove andreturn the head of the queue.Exactly which element is removed from the queue is afunction of the queue's ordering policy, which differs fromimplementation to implementation. The remove() and poll() methods differ only in their behavior when thequeue is empty: the remove() method throws an exception,while the poll() method returns null. 
//The element() and peek() methods return, but donot remove, the head of the queue. 
//The Queue interface does not define the blocking queuemethods, which are common in concurrent programming. These methods,which wait for elements to appear or for space to become available, aredefined in the java.util.concurrent.BlockingQueue interface, whichextends this interface. 
//Queue implementations generally do not allow insertionof null elements, although some implementations, such as LinkedList, do not prohibit insertion of null.Even in the implementations that permit it, null shouldnot be inserted into a Queue, as null is alsoused as a special return value by the poll method toindicate that the queue contains no elements. 
//Queue implementations generally do not defineelement-based versions of methods equals and hashCode but instead inherit the identity based versionsfrom class Object, because element-based equality is notalways well-defined for queues with the same elements but differentordering properties. 
//This interface is a member of the Java Collections Framework.
//Type Parameters:<E> the type of elements held in this queue


//java.util.LinkedList.LinkedList<Integer>()
//Constructs an empty list.

//java.lang.Integer
//@ValueBased
//The Integer class wraps a value of the primitive type int in an object. An object of type Integer contains a single field whose type is int. 
//In addition, this class provides several methods for converting an int to a String and a String to an int, as well as other constants and methods useful when dealing with an int. 
//This is a value-based class; programmers should treat instances that are equal as interchangeable and should not use instances for synchronization, or unpredictable behavior may occur. For example, in a future release, synchronization may fail. 



//remove()
//Integer java.util.Queue.remove()
//Retrieves and removes the head of this queue. This method differsfrom poll() only in that it throws an exception ifthis queue is empty.
//Returns:the head of this queueThrows:NoSuchElementException - if this queue is empty

//add

//boolean java.util.Collection.add(E e)
//Ensures that this collection contains the specified element (optionaloperation). Returns true if this collection changed as aresult of the call. (Returns false if this collection doesnot permit duplicates and already contains the specified element.)
